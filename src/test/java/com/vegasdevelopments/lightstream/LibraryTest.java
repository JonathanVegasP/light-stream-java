/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.vegasdevelopments.lightstream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

public class LibraryTest {
	@Test
	public void testLightStreamMethods() throws InterruptedException {
		// Initialize resources
		final LightStreamBase<String> stream = LightStreamBase.newStream("");

		// Check if the initial value is working
		assertNotNull(stream.getValue());

		// Check if the stream has a Sink (For only entry data purpose)
		final LightSinkBase<String> sink = stream.getSink();
		assertNotNull(sink);

		// Create a subscription and listen when the stream receive a new event
		LightSubscriptionBase<String> subscription = stream.listen((event) -> {
			System.out.println("Event: " + event);
		}, (error) -> {
			if (error instanceof Exception) {
				((Exception) error).printStackTrace();
				System.out.println();
			} else {
				System.out.println("Error: " + error);
			}
		});

		// Stream and Sink must have a listener after the listen method was triggered;
		assertTrue(stream.hasListeners());
		assertTrue(sink.hasListeners());

		// Stream and Sink must have only one listener as the listen was trigger only
		// one time
		assertTrue(stream.length() == 1);
		assertTrue(sink.length() == 1);

		// Check if the listen returns a Subscription to control how the Stream trigger
		// an action after a new event
		assertNotNull(subscription);

		// Check if the listen returned is resumed
		assertFalse(subscription.isPaused());

		// Trigger the listen with a new event at the Stream and check the new value
		stream.add("Hello Stream");
		assertEquals(stream.getValue(), "Hello Stream");

		// Trigget the listen with a new event at the Sink and check the new value
		sink.add("Hello Sink");
		assertEquals(stream.getValue(), "Hello Sink");

		// Trigger the listen with a new error at the Stream
		stream.addError("Something went wrong");

		// Trigger the listen with a new error at the Sink
		sink.addError("Something went wrong");

		// Change the event callback inside the subscription
		subscription.onEvent((event) -> {
			System.out.println(event);
		});

		// Check if the new event will be displayed without Event tag
		stream.add("Streams are awesome");

		// Change the error callback inside the subscription
		subscription.onError((error) -> {
			System.out.println(error);
		});

		// Check if the new error will be displayed without an Error tag
		stream.addError("Reactive programming is awesome");

		// Check when the subscription is paused if it does not trigger any callback
		subscription.pause();
		stream.add("Event is paused");
		assertTrue(subscription.isPaused());
		
		//Check when the subscription is resumed if it trigger an Event callback;
		subscription.resume();
		stream.add("Event is resumed");
		assertFalse(subscription.isPaused());
		
		// Check if the subscription can be unsubscribed without Stream or Sink
		subscription.cancel().join();
		assertFalse(stream.hasListeners());
		assertEquals(stream.length(), 0);

		// Add a new subscription with only done callback
		subscription = stream.listen(null, () -> {
			System.out.println("Done");
		});
		assertTrue(stream.hasListeners());
		assertEquals(stream.length(), 1);

		// Close all listeners and trigger done callback
		subscription.cancel();
		stream.close().join(); //Or sink.close().join(); as the Stream use the same method as Sink
		assertNull(stream.getValue());
		assertTrue(stream.isClosed());
		assertTrue(sink.isClosed());
		assertFalse(stream.hasListeners());
		assertFalse(sink.hasListeners());
		assertEquals(stream.length(), 0);
		assertEquals(sink.length(), 0);

		// Check when adding a new event to a closed Stream an error has to be occured
		try {
			stream.add("Error");
		} catch (LightStreamException e) {
			e.printStackTrace();
		}

		try {
			sink.add("Error");
		} catch (LightStreamException e) {
			e.printStackTrace();
		}

		// Check when listening to a closed Stream an error has to be occured
		try {
			stream.listen(null);
		} catch (LightStreamException e) {
			e.printStackTrace();
		}

		// Check when closing a closed Stream an error has to be occured
		try {
			stream.close().join();
		} catch (LightStreamException e) {
			e.printStackTrace();
		}

		// Check when closing a closed Stream an error has to be occured
		try {
			stream.close().join();
		} catch (LightStreamException e) {
			e.printStackTrace();
		}
		
		//Check when closing a closed Sink an error has to be occured
		try {
			sink.close().join();
		} catch (LightStreamException e) {
			e.printStackTrace();
		}
	}
}
